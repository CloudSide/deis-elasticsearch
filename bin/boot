#!/usr/bin/env bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT="${ETCD_PORT:-4001}"
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH="${ETCD_PATH:-/hehe/services/elasticsearch}"
export ETCD_TTL="${ETCD_TTL:-60}"

# wait for etcd to be available
until etcdctl --no-sync -C "$ETCD" ls >/dev/null 2>&1; do
  echo "elasticsearch: waiting for etcd at $ETCD..."
  sleep $((ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $((ETCD_TTL+1))

/app/bin/run elasticsearch &

SERVICE_PID=$!

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
    kill -TERM $SERVICE_PID
    wait $SERVICE_PID 2>/dev/null
    exit 0
}
trap on_exit INT TERM

echo "elasticsearch is running..."

# publish the service to etcd using the injected HOST and EXTERNAL_PORT_HTTP
if [[ ! -z $EXTERNAL_PORT_HTTP ]]; then
  # configure service discovery
  PORT=${PORT:-9200}
  PROTO=${PROTO:-tcp}
  EXTERNAL_PORT_TRANSPORT=${EXTERNAL_PORT_TRANSPORT:-9300}

  set +e

  # wait for the service to become available on PORT
  until curl -sSL --fail http://localhost:${PORT}/ | grep -e 'version' >/dev/null 2>&1; do sleep 1; done

  # while the port is listening, publish to etcd
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PORT\" && \$1 ~ \"$PROTO.?\"") ]] ; do
    etcdctl --no-sync -C "$ETCD" set "$ETCD_PATH/${HOST}" '{"http_port": ${EXTERNAL_PORT_HTTP}, "transport_port": ${EXTERNAL_PORT_TRANSPORT}}' --ttl "$ETCD_TTL" >/dev/null
    sleep $((ETCD_TTL/2)) # sleep for half the TTL
  done

  # if the loop quits, something went wrong
  /app/bin/clean
  exit 1

fi


wait
